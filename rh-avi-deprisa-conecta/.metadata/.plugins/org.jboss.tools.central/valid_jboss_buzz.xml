<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>An API Journey: From Idea to Deployment the Agile Way–Part III</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kzjLLMjcnC0/" /><category term="Microservices" /><category term="Modern App Dev" /><category term="3scale" /><category term="API" /><category term="ci/cd" /><category term="design" /><category term="microservices" /><category term="mock" /><category term="OpenShift Container Platform" /><category term="testing" /><author><name>Laurent Broudoux</name></author><id>https://developers.redhat.com/blog/?p=477587</id><updated>2018-04-26T10:55:06Z</updated><published>2018-04-26T10:55:06Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;This is part III of a three-part series describing a proposed approach for an agile API lifecycle: from ideation to production deployment. If you missed it or need a refresher, please take some time to read &lt;a href="https://developers.redhat.com/blog/2018/04/11/api-journey-idea-deployment-agile-part1/"&gt;part I&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2018/04/19/api-journey-idea-deployment-agile-way-part2/"&gt;part II&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This series is coauthored with Nicolas Massé, also a Red Hatter, and it is based on our own real-life experiences from our work with the Red Hat customers we’ve met.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In part II, we discovered how ACME Inc. is taking an agile API journey for its new &lt;code&gt;Beer Catalog API&lt;/code&gt; deployment. ACME set up modern techniques for continuously testing its API implementation within the continuous integration/continuous delivery (CI/CD) pipeline. Let&amp;#8217;s go now to securing the exposition.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-477587"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Milestone 6: API Exposition to the Outer World&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The final milestone of our journey is here. The purpose of this stage is to securely expose our API to the outer world. This is the typical use case for the API management and associated gateway solutions. Applying API management when exposing the API to the outer world allows a better separation of concerns.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The API gateway is typically there to:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Apply identification of consumers through the delivery of API keys&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Enforce security policies using standards such as OAuth or SAML&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Apply consumption policies such as rate limiting or version control&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Prevent attacks such as denial-of-service attacks and script injection&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Provide better insights into how your API is used in terms of traffic and peak usage&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The management counterpart is a better place for:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Distributing official documentation (contracts AND mocks AND tests)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Onboarding developers, registering and accessing forums or FAQs for the API&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Building analytics reporting on usage&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Applying monetization policies and producing charge-back/show-back reports&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;API management solutions are not really new but what we want to highlight here is that there’s a shift in their architecture. As stated in the latest &lt;/span&gt;&lt;a href="https://www.thoughtworks.com/radar/platforms/overambitious-api-gateways"&gt;&lt;span style="font-weight: 400;"&gt;ThoughtWorks Technology Radar&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, the overambitious API gateway is now on hold. We’re shifting to a world of micro-gateways that have to be deployed close to the protected back end and that should focus on core concerns about traffic management (authentication, access control, and service-level agreements).  &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;What we are trying to achieve is described on the following schema: having a simple, lightweight gateway deployed close to our implementation and, thus, on the same cloud-ready PaaS platform.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-482377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management-1024x537.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management-300x157.png" alt="API Management stage" width="300" height="157" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management-768x403.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management-1024x537.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-management.png 1262w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The solution we introduce now is the &lt;/span&gt;&lt;a href="https://www.3scale.net/"&gt;&lt;span style="font-weight: 400;"&gt;3scale API Management&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; solution by Red Hat. 3scale is a hybrid architecture solution with a lightweight gateway that is easily deployable on OpenShift right next your back end. So, we are going to deploy a 3scale gateway for our ACME &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Beer Catalog API&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Before diving into gateway deployment, there’s a bunch of setup to do in the 3scale management console. Basically, we’ll have to declare this new API, its application plan and service plan, and its integration details.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You can see this in the screen capture below. Here, the gateway will just route incoming traffic to the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;http://beer-catalog-impl.beer-catalog-prod.svc.cluster.local:8080&lt;/code&gt; &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;URL that is the internal Kubernetes URL of our back end. With 3scale, there is no need to let the back end be reachable from the outer world.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-482397 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-api-configuration-1024x784.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-api-configuration-1024x784.png" alt="3scale API configuration" width="640" height="490" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-api-configuration-1024x784.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-api-configuration-300x230.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-api-configuration-768x588.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;As previously mentioned, we may then use a custom script to deploy the 3scale gateway on our &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;beer-catalog-prod&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; environment. The script is called &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;deploy-3scale.sh&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; and is located in the &lt;/span&gt;&lt;a href="https://github.com/microcks/api-lifecycle/tree/master/beer-catalog-demo"&gt;&lt;span style="font-weight: 400;"&gt;GitHub repository&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. You will have to adapt the 3scale security token before running it. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;So, just execute this script once you are logged on to your OpenShift environment and you should get a new 3scale gateway appearing in your &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;beer-catalog-prod&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; project.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-482407 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/openshift-3scale-deployment-1024x503.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/openshift-3scale-deployment-1024x503.png" alt="3scale gateway deployment on openshift" width="1024" height="503" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/openshift-3scale-deployment-1024x503.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/openshift-3scale-deployment-300x147.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/openshift-3scale-deployment-768x377.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Now that we’ve got our implementation deployed and protected, it’s time for a final test. We will also have a review on what insights and powerful features it can bring us for the 3scale API gateway.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Suppose a reseller partner of ACME has just developed a new mobile application for its customers to browse the ACME brewery catalog. We are going to test it. Before that, we’ll simulate the registration of Alice&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;, a new developer who wants to use our &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Beer Catalog API&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. Just create a new developer in the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Developer&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; group from the admin console.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-developer-account-1024x389.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-developer-account-1024x389.png" alt="3scale developer account form" width="1024" height="389" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-developer-account-1024x389.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-developer-account-300x114.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-developer-account-768x292.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;And then, create a new application within Alice&amp;#8217;s account. This application, which we’ll call the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Alice beer catalog app&lt;/code&gt;,&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; should use an &lt;code&gt;Application Plan&lt;/code&gt; and a &lt;code&gt;Service Plan&lt;/code&gt; you have attached to your API.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-app-details-1024x517.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-app-details-1024x517.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-app-details-1024x517.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-app-details-300x151.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-app-details-768x388.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The goal of this registration is to retrieve the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;User Key&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; we see in the screenshot above. This key is the access credential we should provide to identify on the 3scale gateway. Finally, we can set up the mobile app that is located in the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;/api-consumer&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; directory of the &lt;/span&gt;&lt;a href="https://github.com/microcks/api-lifecycle/tree/master/beer-catalog-demo"&gt;&lt;span style="font-weight: 400;"&gt;GitHub repository&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. Copy the key and then edit the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;config.js&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; file to paste in the key. Then, run everything from this directory on a web server.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For example, you can simply run &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;python -m SimpleHTTPServer 8888&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; and open a new browser window on &lt;/span&gt;&lt;code&gt;&lt;span style="font-weight: 400;"&gt;http://&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;localhost&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;:8888&lt;/span&gt;&lt;/code&gt;&lt;span style="font-weight: 400;"&gt;. You may adapt the display for a mobile device for a better perspective on future usage.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile-577x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile-577x1024.png" alt="Beer catalog mobile app" width="577" height="1024" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile-577x1024.png 577w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile-169x300.png 169w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile-768x1362.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/beer-catalog-mobile.png 1000w" sizes="(max-width: 577px) 100vw, 577px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Click the refresh button a couple of times and, depending on your application plan rate limits, you should raise some exception messages when hitting the API too much. Now, let’s go back to the 3scale administration console and see the analytics of your API being updated, reflecting real-time traffic, such as what&amp;#8217;s shown below:&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-analytics-1024x647.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-analytics-1024x647.png" alt="Beer catalog API analytics" width="1024" height="647" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-analytics-1024x647.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-analytics-300x190.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/3scale-analytics-768x486.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;It is now time to play with some feature such as rate limits and monetization policies to see the full benefits of the 3scale gateway.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;The End-to-End Flow&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Here we are at the end of our journey for the ACME Inc. API. This journey led us to deploy our API onto a production environment but also to use new methodologies such as mocking and continuous testing when delivering the API to the rest of the world. We have also tested a mobile application that uses our API, managed through the 3scale management solution. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;When looking in the rear-view mirror, you may ask if all those stages can be realized by only one person and in a sequence. That’s precisely what we’d like to highlight in next figure. The whole lifecycle indeed involves different flows and different actors. We could at least dissociate:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;The API Designer flow that encompasses the first milestones of our journey: from the ideation to the mocks and tests ready-to-use milestone. We mainly see a sole responsibility for these activities.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;The API Provider flow that takes care of the following milestones in our journey: from development to continuous tests to deployment.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;The API Consumer flow, which may be impacted when introducing the sampling and mocking step in your lifecycle. This flow can be dramatically faster and earlier in the timeline when sampling and mocking are done.&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/end-to-end-flow-1024x474.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/end-to-end-flow-1024x474.png" alt="End-to-end flow" width="1024" height="474" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/end-to-end-flow-1024x474.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/end-to-end-flow-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/end-to-end-flow-768x356.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Of course, these flows should have interactions and feedback loops should be integrated between each party. Typically, the Provider may be able to enrich the set of samples to illustrate some edge cases that may have been left out during initialization. Its contributions are also very helpful for making samples more clear regarding business rules or expectations. API consumer feedback has also a great role to play when it comes to contract design. &lt;/span&gt;&lt;b&gt;Consumer-driven expectations are gold for later non-regression tests realized in the delivery pipeline of the API Provider.&lt;/b&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;All these feedback loops are really easy to set up and govern when using open and collaborative tools such as we did during the ACME Inc. use case. Have any doubts about the API operations? Have a look at Microcks repository. Want to enrich the API by adding a new exception case? Edit the Postman collection and realize a Pull/Merge Request on the Git repository. Want to emphasize one of your particular usages of the API through its contract? You get the point&amp;#8230;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;The API Lifecycle &lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Throughout our journey, we have gone through milestones that make up a cycle. The different phases—API ideation, design, sampling, deployment, and so on—build up a truly iterative and incremental cycle that allows you to be more efficient when deploying the API. Moreover, it allows consumers to start playing with the API earlier in the development cycle by using sampling and mocking techniques.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Remember each milestone of our API journey? Here is the full picture with the different tools and technologies we have used during the different phases.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-483167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-lifecycle-1024x709.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-lifecycle-1024x709.png" alt="Full API lifecycle around OpenShift" width="1024" height="709" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-lifecycle-1024x709.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-lifecycle-300x208.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-lifecycle-768x532.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Besides the API we developed in our use case, all the tools introduced in this series may also be deployed on the Red Hat OpenShift Container Platform. They may be deployed on-premise or in the cloud, depending on the hybrid cloud strategy of your enterprise.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;What we want to highlight here is the unique positioning of &lt;/span&gt;&lt;b&gt;OpenShift as the true enabler of an agile API Journey. &lt;/b&gt;&lt;/p&gt; &lt;p&gt;Using OpenShift, you&amp;#8217;ll be able to easily deploy the tools used during the first phases: Microcks and Apicurio can both be installed on OpenShift. The container platform also provides extensive support for all the languages and frameworks that can be used for modern application development. These can be microservices-oriented frameworks such as Spring Boot, VertX, NodeJS, or WildFly Swarm as well as integration solutions such as JBoss Fuse. Continuous testing and delivery is made easy in OpenShift through the support and integration of Jenkins pipelines. Microcks comes to the rescue for testing contracts and expectations. The 3scale micro-gateway can be deployed in seconds for enforcing security and access policies. And, you finally get everything you need—from metrics and log collection to distributed tracing and automatic resilience—to run and monitor your back ends and these components the operational excellence way. It&amp;#8217;s definitely worth a try, isn’t it?&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Key Takeaways&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;With API management solutions becoming mainstream, it&amp;#8217;s getting easy to securely expose APIs to the world. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;However, a true agile delivery process for your API is more than just an API management solution.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The API journey goes through many milestones including contract designing, mocking, and testing. Your delivery process should encompass all these activities in order to be truly agile and speed up your development as well as to meet the needs of your customers and partners.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Our proposed approach is built on pragmatic usage of open source tools that allow real collaboration and communication among projects and consumers in an ecosystem. Modern development methods based on a container platform also help in setting up continuous deployment and improvement loops. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;If you already use this methodology, if you went through the examples of this blog post series, or if you want to discuss this further, feel free to reach out to the authors: Laurent &lt;a href="https://twitter.com/lbroudoux"&gt;@lbroudoux&lt;/a&gt; and Nicolas &lt;a href="https://twitter.com/nmasse_itix"&gt;@nmasse_itix&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F26%2Fapi-journey-idea-deployment-agile-way-part3%2F&amp;#38;title=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20III" data-a2a-url="https://developers.redhat.com/blog/2018/04/26/api-journey-idea-deployment-agile-way-part3/" data-a2a-title="An API Journey: From Idea to Deployment the Agile Way–Part III"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/26/api-journey-idea-deployment-agile-way-part3/"&gt;An API Journey: From Idea to Deployment the Agile Way&amp;#8211;Part III&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kzjLLMjcnC0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is part III of a three-part series describing a proposed approach for an agile API lifecycle: from ideation to production deployment. If you missed it or need a refresher, please take some time to read part I and part II. This series is coauthored with Nicolas Massé, also a Red Hatter, and it is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/26/api-journey-idea-deployment-agile-way-part3/"&gt;An API Journey: From Idea to Deployment the Agile Way&amp;#8211;Part III&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/04/26/api-journey-idea-deployment-agile-way-part3/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">477587</post-id><dc:creator>Laurent Broudoux</dc:creator><dc:date>2018-04-26T10:55:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/26/api-journey-idea-deployment-agile-way-part3/</feedburner:origLink></entry><entry><title>Portland Java User Group (PJUG) Session and Slides</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4LR1Zw0hdBM/portland-java-user-group-pjug-session-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="BRMS" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JUG" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-portland_java_user_group_pjug_session_and_slides</id><updated>2018-04-26T05:00:03Z</updated><published>2018-04-26T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://1.bp.blogspot.com/-aLnk4e4Pzdc/WuDOGkgVckI/AAAAAAAAsVo/Y6c7dwI4P9sck6X-O2gePFHbgJAaTEp-QCLcBGAs/s1600/KUQvVKn0T0Kure%2525h7JVBSQ.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="portland java user" border="0" data-original-height="1600" data-original-width="1200" height="200" src="https://1.bp.blogspot.com/-aLnk4e4Pzdc/WuDOGkgVckI/AAAAAAAAsVo/Y6c7dwI4P9sck6X-O2gePFHbgJAaTEp-QCLcBGAs/s200/KUQvVKn0T0Kure%2525h7JVBSQ.jpg" title="" width="150" /&gt;&lt;/a&gt;&lt;a href="https://1.bp.blogspot.com/-aLnk4e4Pzdc/WuDOGkgVckI/AAAAAAAAsVo/Y6c7dwI4P9sck6X-O2gePFHbgJAaTEp-QCLcBGAs/s1600/KUQvVKn0T0Kure%2525h7JVBSQ.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;br /&gt;&lt;/a&gt;&lt;br /&gt;As I mentioned previously, I was going to be on the west coast for a few weeks and was invited to &lt;a href="http://www.schabell.org/2018/04/portland-java-user-group-10-steps-to-cloud-happiness.html" style="text-align: left;" target="_blank"&gt;speak for the Portland Java User Group (PJUG)&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The eventing was hosted by a recruitment company with pizza and drinks for all. We had 29 registered for the event an about 20 in the room when I kicked of the talk.&lt;br /&gt;&lt;br /&gt;There was a lot of active discussions at the end and several attendees approached afterward about getting started on their own laptops with the workshop that was showcased.&lt;br /&gt;&lt;br /&gt;Here is the abstract again and the slides:&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="https://www.slideshare.net/slideshow/embed_code/key/E9uCo1ZZAs6m2O" style="border-color: rgb(204, 204, 204); border-style: solid; border-width: 1px; margin-bottom: 5px; max-width: 100%;" width="510"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Abstract: 10 Steps to Cloud Happiness&lt;/h3&gt;A modern developers world is full of new tools, new technologies and getting started can become a bit daunting. Let's take a tour of how to get started with containers, Cloud and some examples so that you have your very own private PaaS Cloud on your laptop. You'll be given a private Cloud in minutes that turns your laptop into a container platform where you then can explore a multitude of example projects from such domains as retail, travel, finance and more. Hold on to your developer hats as we get you started on application development in the Cloud with open technologies, Ansible deployment automation and container-based fun. Everything you're shown in this session is available for attendees to explore online and hands-on once they've returned home.&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hqEKBoBxuKs:2v-zRLgseOI:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hqEKBoBxuKs:2v-zRLgseOI:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hqEKBoBxuKs:2v-zRLgseOI:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hqEKBoBxuKs:2v-zRLgseOI:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hqEKBoBxuKs:2v-zRLgseOI:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/hqEKBoBxuKs" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4LR1Zw0hdBM" height="1" width="1" alt=""/&gt;</content><summary>As I mentioned previously, I was going to be on the west coast for a few weeks and was invited to speak for the Portland Java User Group (PJUG). The eventing was hosted by a recruitment company with pizza and drinks for all. We had 29 registered for the event an about 20 in the room when I kicked of the talk. There was a lot of active discussions at the end and several attendees approached afterwa...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-04-26T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/hqEKBoBxuKs/portland-java-user-group-pjug-session-slides.html</feedburner:origLink></entry><entry><title>18th bug-fix release for ORM 5.2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Lr8ncUz6rqs/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>andrea boriero</name></author><id>searchisko:content:id:jbossorg_blog-18th_bug_fix_release_for_orm_5_2</id><updated>2018-04-26T11:36:28Z</updated><published>2018-04-26T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The 18th bug-fix release for Hibernate ORM 5.2 has just been published.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new ?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This release introduces several minor features and fixes more bugs.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="details"&gt;&lt;a class="anchor" href="#details"&gt;&lt;/a&gt;Details&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;tag is &lt;a href="http://github.com/hibernate/hibernate-orm/releases/tag/5.2.17"&gt;here&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;the complete list of changes can be found &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31651/tab/release-report-done"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31651&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;);&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;release bundles are at &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-orm/5.2.17.Final/"&gt;SourceForge&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For information on consuming the release via your favorite dependency-management-capable build tool, see &lt;a href="http://hibernate.org/orm/releases/5.2"&gt;releases&lt;/a&gt;&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="changes-in-the-code-tablegenerator-code-and-code-sequencegenerator-code-name-scope"&gt;&lt;a class="anchor" href="#changes-in-the-code-tablegenerator-code-and-code-sequencegenerator-code-name-scope"&gt;&lt;/a&gt;Changes in the &lt;code&gt;@TableGenerator&lt;/code&gt; and &lt;code&gt;@SequenceGenerator&lt;/code&gt; name scope&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;From &lt;a href="http://in.relation.to/2018/02/07/hibernate-orm-5213-final-release/"&gt;5.2.13&lt;/a&gt; the id generator name scope was considered global but realizing this change could cause trouble for some existing projects (see &lt;a href="https://hibernate.atlassian.net/browse/HHH-12454"&gt;HHH-12454&lt;/a&gt;), starting from 5.2.17 the scope of the id generators names will be considered local by default (which is the pre-5.2.13 behavior) and a new configuration setting &lt;code&gt;hibernate.jpa.compliance.global_id_generators&lt;/code&gt; can be used to enable the JPA compliant global scoping.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Lr8ncUz6rqs" height="1" width="1" alt=""/&gt;</content><summary>The 18th bug-fix release for Hibernate ORM 5.2 has just been published. What’s new ? This release introduces several minor features and fixes more bugs. Details tag is here; the complete list of changes can be found here (or, for people without a Hibernate Jira account, here); release bundles are at SourceForge. For information on consuming the release via your favorite dependency-management-capab...</summary><dc:creator>andrea boriero</dc:creator><dc:date>2018-04-26T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/04/26/hibernate-orm-5217-final-release/</feedburner:origLink></entry><entry><title>Red Hat Summit 2018: Trends in cloud-native development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/IWpAeLfHzmo/" /><category term="Events" /><category term="Modern App Dev" /><category term="Red Hat Summit" /><category term="cloud native development" /><category term="Developer Events" /><category term="red hat summit" /><category term="Red Hat Summit 2018" /><author><name>Mike Guerette</name></author><id>https://developers.redhat.com/blog/?p=488087</id><updated>2018-04-25T16:59:11Z</updated><published>2018-04-25T16:59:11Z</published><content type="html">&lt;p&gt;At &lt;strong&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt;&lt;/strong&gt;, learn about the the top trends shaping the future of modern application development. You&amp;#8217;ll find out how service mesh and serverless computing are continuing the evolution that started with the move to microservices architecture. Hear &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366942"&gt;Burr Sutter&lt;/a&gt;, and &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366958"&gt;Brad Micklea&lt;/a&gt; discuss the 10 major changes that are poised to reshape the developer tools market for years to come. Gain insight as Red Hat CTO &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=383870"&gt;Chris Wright&lt;/a&gt; shares his views about how serverless, AI, and blockchain are likely to influence the future of technology.&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162577"&gt;&lt;span style="font-weight: 400;"&gt;10 trends reshaping the developer experience&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163626"&gt;&lt;span style="font-weight: 400;"&gt;Charting new territories with Red Hat&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154853"&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes and the platform of the future&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163813"&gt;&lt;span style="font-weight: 400;"&gt;Containers, microservices, serverless: On being serverless or serverful&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162834"&gt;Clouds today, serverless tomorrow: Your future apps and platforms&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154409"&gt;An eventful tour from enterprise integration to serverless computing&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can also learn about the future of Red Hat&amp;#8217;s developer tools:&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163807"&gt;Future and roadmap for developer tools&lt;/a&gt;&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163810"&gt;The future of OpenShift.io&lt;/a&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153668"&gt;&lt;span style="font-weight: 400;"&gt;OpenShift roadmap: You won&amp;#8217;t believe what&amp;#8217;s next&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Join us May 8th – 10th at &lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt; in San Francisco, at the Moscone Center.&lt;/strong&gt;&lt;/p&gt; &lt;h2&gt;Session Highlights:&lt;/h2&gt; &lt;p&gt;&lt;span id="more-488087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162577"&gt;10 trends reshaping the developer experience&lt;/a&gt; &lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366942"&gt;Burr Sutter&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366958"&gt;Brad Micklea&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Red Hat’s developer tools group is focused on creating compelling experiences for developers working with containers and serverless technologies. In this session, you will learn about the 10 major changes that we believe will reshape the developer tools market in the next 10 years and how our four product goals will help Red Hat customers and Red Hat OpenShift developers thrive in this new world. We’ll conclude with a demo of our cloud-native developer tooling for Red Hat OpenShift.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163626"&gt;Charting new territories with Red Hat&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:  &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=383870"&gt;Chris Wright&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;What emerging technologies is Red Hat exploring?&lt;/p&gt; &lt;p&gt;Attend this session where Red Hat CTO Chris Wright will provide insights into Red Hat’s research, innovation efforts, and direction related to emerging technologies, such as serverless, artificial intelligence (AI), blockchain, and more. Learn how innovative projects and technologies are evolving to help you plan and refine your IT strategies and roadmaps.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154853"&gt;Kubernetes and the platform of the future&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:  &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366103"&gt;Steve Watt&lt;/a&gt;,  &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=391338"&gt;Clayton Coleman&lt;/a&gt;,  &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_2" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=391339"&gt;Brandon Philips&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this fireside chat, we’ll interview Clayton Coleman (Chief Engineer for OpenShift) and Brandon Philips (previously CTO of CoreOS, acquired by Red Hat) on their long term view on platforms and where we’ll be taking Kubernetes and OpenShift in the future. Clayton and Brandon have led development for most of the major technologies that power the Linux Container ecosystem today (Kubernetes, Open Container Initiative, etcd and more). Come prepared to ask questions and learn about the past, the present, and the future.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163813"&gt;Containers, microservices, serverless: On being serverless or serverful&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speaker: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366942"&gt;Burr Sutter&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;div id="MainContent_HubbSessionDetail_sessionBiography" class="section"&gt; &lt;p class="profileBiography"&gt;The first generation of microservices was primarily shaped by Netflix OSS and used by numerous Spring Cloud annotations all throughout your business logic. The next generation of microservices will use sidecars and a service mesh. In this session, we&amp;#8217;ll give you a taste of Envoy and Istio, 2 open source projects that will change the way you write distributed, cloud native, Java applications on Kubernetes.&lt;/p&gt; &lt;p class="profileBiography"&gt;Then we&amp;#8217;ll show you the power of Serverless architecture. Serverless is a misnomer; your future cloud native applications will consist of both microservices and functions, often wrapped as Linux containers, but in many cases where you, the developer, ignore the operational aspects of managing that infrastructure.&lt;/p&gt; &lt;p class="profileBiography"&gt;In this session, we start off building a Function-as-a-Service (FaaS) platform with Apache OpenWhisk deployed on OpenShift. With OpenShift being the de facto platform for cloud-native Java applications, we&amp;#8217;ll explore further to see how to make cloud-native Java applications (a.k.a microservices) complement the serverless functions.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162834"&gt;Clouds today, serverless tomorrow: Your future apps and platforms&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speaker: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=383873"&gt;Stephanos Bacon&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;For years, the future of software architectures has been described as a proliferation of lightweight, cloud-connected devices. Many organizations are adopting microservices architecture (MSA) alongside more traditional ones to realize this future, where modular systems can be created more quickly and managed on a scale that exceeds earlier approaches. And yet, we continue to move forward. An exciting future that includes serverless is emerging. Serverless is a major shift in the way developers will build and deliver software systems by further insulating them from infrastructure concerns.&lt;/p&gt; &lt;p&gt;Each approach offers its own set of benefits and challenges. The reality is that most organizations will have a mixture of architectures, platforms, tools, and processes for the foreseeable future. How should you be thinking about the evolution of your application architecture and the platforms that support it?&lt;/p&gt; &lt;p&gt;If you do it right, developers will be able to exploit complex logic and large datasets from a variety of sources to build applications that they could never have imagined just a few years ago. Attend this session to learn what existing and emerging technologies Red Hat is exploring in this area and which ones you should be considering to tie it all together.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154409"&gt;An eventful tour from enterprise integration to serverless computing&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:&lt;/strong&gt;  &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365640"&gt;Christian Posta&lt;/a&gt;,  &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366598"&gt;Marius Bogoevici&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract: &lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Microservices, data streaming, and serverless computing are trendy, and for good reason. These technologies have evolved to provide economical solutions to modern problems, and have been enabled by technical innovations, such as cloud platforms and an increased demand for data, and experiment-driven business models.&lt;/p&gt; &lt;p&gt;However, simply following trends is not a recipe for success. To adopt new technologies and architectural patterns efficiently, developers and architects must understand how they evolved in the larger context of messaging and event-driven architecture.&lt;/p&gt; &lt;p&gt;Join us for an overview of different styles of messaging and event-driven architecture, ranging from enterprise integration to event-driven microservices, data streaming, and serverless computing. We will show you how these technologies came into existence, how they evolved from each other, and what problems they solve. To keep things practical, we will show you how to build and run them on Red Hat OpenShift with Red Hat portfolio components.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;p class="selectionShareable"&gt;&lt;strong&gt;Join us May 8th – 10th at &lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt; in San Francisco, at the Moscone Center.&lt;/strong&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/"&gt;List of all sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/Speakers.aspx"&gt;List of All Speakers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Application%20development=2"&gt;All Application development sessions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fred-hat-summit-2018-future-cloud-native-development%2F&amp;#38;title=Red%20Hat%20Summit%202018%3A%20Trends%20in%20cloud-native%20development" data-a2a-url="https://developers.redhat.com/blog/2018/04/25/red-hat-summit-2018-future-cloud-native-development/" data-a2a-title="Red Hat Summit 2018: Trends in cloud-native development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/red-hat-summit-2018-future-cloud-native-development/"&gt;Red Hat Summit 2018: Trends in cloud-native development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/IWpAeLfHzmo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;At Red Hat Summit 2018, learn about the the top trends shaping the future of modern application development. You&amp;#8217;ll find out how service mesh and serverless computing are continuing the evolution that started with the move to microservices architecture. Hear Burr Sutter, and Brad Micklea discuss the 10 major changes that are poised to reshape the developer tools [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/red-hat-summit-2018-future-cloud-native-development/"&gt;Red Hat Summit 2018: Trends in cloud-native development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">488087</post-id><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-25T16:59:11Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/25/red-hat-summit-2018-future-cloud-native-development/</feedburner:origLink></entry><entry><title>Automating AMQ 7 High Availability Deployment</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OMVspSdzYB0/" /><category term="JBoss A-MQ" /><category term="amq" /><category term="amqp" /><category term="JBoss AMQ" /><category term="Red Hat JBoss AMQ" /><author><name>Abraham Francisco Arellano Tavara</name></author><id>https://developers.redhat.com/blog/?p=482987</id><updated>2018-04-25T10:55:57Z</updated><published>2018-04-25T10:55:57Z</published><content type="html">&lt;p&gt;Red Hat JBoss AMQ 7 provides fast, lightweight, and secure messaging for internet-scale applications. In addition, AMQ 7 components use industry-standard message protocols and support a wide range of programming languages and operating environments.&lt;/p&gt; &lt;p&gt;Therefore, AMQ 7 gives you the strong foundation you need to build modern distributed applications. Especially relevant is that multiple instances of AMQ 7 brokers can be grouped together to share message processing load.&lt;/p&gt; &lt;p&gt;Each broker manages its own messages and connections and is connected to other brokers with &amp;#8220;cluster bridges&amp;#8221; that are used to send topology information, such as queues and consumers, as well as load balancing messages.&lt;/p&gt; &lt;p&gt;AMQ 7 supports two different strategies for backing up a server: shared store and replication.&lt;/p&gt; &lt;p&gt;&lt;span id="more-482987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;An analysis of the installation procedure was done, it was decided to provide a layer on top of the manual setup of the AMQ 7 configuration. As a result, the following project was implemented to provide  deployment automation for an AMQ 7 high availability (HA) shared store:&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/AbrahamArellano/amq-ha-shared-store-demo"&gt;https://github.com/AbrahamArellano/amq-ha-shared-store-demo&lt;/a&gt;&lt;/p&gt; &lt;h1&gt;What&amp;#8217;s Covered in This Article?&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#overview"&gt;Overview of the deployment automation AMQ 7 HA shared store project&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#whatprovides"&gt;What does this project provide?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#whatarescripts"&gt;What scripts are provided?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#installprereq"&gt;Installation prerequisites&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#projectdownload"&gt;Downloading the project&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#projectconfig"&gt;Configuring the project&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#exec"&gt;Executing the project: AMQ 7 deployment&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#test"&gt;Testing AMQ 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#testsetup"&gt;Test setup&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#uninstall"&gt;Uninstalling AMQ 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#collaboration"&gt;Collaboration&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1 id="overview"&gt;Overview of the Deployment Automation AMQ 7 HA Shared Store Project&lt;/h1&gt; &lt;p&gt;First, it is important to mention that AMQ has two policies using different strategies to enable failover:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Replication: The master and slave brokers synchronize data over the network.&lt;/li&gt; &lt;li&gt;Shared store: Master and slave brokers share the same location for their messaging data.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;When using a shared store, both the master and slave brokers share a single data directory using a shared file system. This data directory includes the paging directory, journal directory, large messages, and binding journal.&lt;/p&gt; &lt;p&gt;A slave broker loads the persistent storage from the shared file system if the master broker disconnects from the cluster. Clients can connect to the slave broker and continue their sessions.&lt;/p&gt; &lt;p&gt;The advantage of shared-store HA is that no replication occurs between the master and slave nodes. This means there are no performance penalties due to the overhead of replication during normal operation.&lt;/p&gt; &lt;p&gt;The disadvantage of shared-store replication is that it requires a shared file system. Consequently, when the slave broker takes over, it needs to load the journal from the shared store, which can take some time depending on the amount of data in the store.&lt;/p&gt; &lt;p&gt;This style of HA differs from data replication in that it requires a shared file system that is accessible by both the master and slave nodes. Typically this is some kind of high-performance Storage Area Network (SAN). It is recommended that you do &lt;em&gt;not&lt;/em&gt; use Network Attached Storage (NAS).&lt;/p&gt; &lt;h1 id="whatprovides"&gt;What Does This Project Provide?&lt;/h1&gt; &lt;p&gt;The scripts provided by this project are intended to be used for test or production environments where you have the following requirements:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A cluster with two nodes (master/slave) deployed on different hosts or on the same host&lt;/li&gt; &lt;li&gt;Cluster security and additional settings configuration&lt;/li&gt; &lt;li&gt;HA using a shared store&lt;/li&gt; &lt;li&gt;An Admin user&lt;/li&gt; &lt;li&gt;Address/queue security: An additional user with limited permissions (using properties; no certificates)&lt;/li&gt; &lt;li&gt;AMQ tuning for: &lt;ul&gt; &lt;li&gt;Message redelivery&lt;/li&gt; &lt;li&gt;Redelivery delay&lt;/li&gt; &lt;li&gt;Message expiration&lt;/li&gt; &lt;li&gt;Dead-letter address&lt;/li&gt; &lt;li&gt;Slow consumer handling&lt;/li&gt; &lt;li&gt;Paging&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Access to the console from localhost and from a remote host&lt;/li&gt; &lt;li&gt;A configurable test suite: consumer and producer&lt;/li&gt; &lt;li&gt;Uninstaller script&lt;/li&gt; &lt;li&gt;Web console port configuration&lt;/li&gt; &lt;li&gt;The possibility to install—with few changes—multiple instances in the same host&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The overall requirement is to have an automated way to deploy your AMQ cluster with a minimum amount of effort and configuration.&lt;/p&gt; &lt;h1 id="whatarescripts"&gt;What Scripts Are Provided?&lt;/h1&gt; &lt;h2&gt;Product Deployer Script&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;product_installer_script.sh&lt;/code&gt; deploys the AMQ 7 binary at the given location. It is a prerequisite before other scripts are executed.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Installer Scripts&lt;/h2&gt; &lt;p&gt;The installer scripts allow you to deploy a master and a slave AMQ 7 HA configuration. The project can be deployed on the same host or on different hosts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;master_installer_script&lt;/code&gt; installs the master.&lt;/li&gt; &lt;li&gt;&lt;code&gt;slave_installer_script&lt;/code&gt; installs the slave.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Uninstaller Scripts&lt;/h2&gt; &lt;p&gt;The uninstaller scripts allow you to remove the AMQ 7 HA installation for the master and slave and the clean up the persistence.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;uninstaller_script.sh&lt;/code&gt; uninstalls the AMQ 7 instance(s) deployed on the host where it is executed.&lt;/li&gt; &lt;li&gt;&lt;code&gt;uninstaller_persistence_script.sh&lt;/code&gt; uninstalls the AMQ 7 persistence storage.&lt;/li&gt; &lt;/ul&gt; &lt;h1 id="installprereq"&gt;Installation Prerequisites&lt;/h1&gt; &lt;p&gt;The provided scripts can be used to install AMQ in two different ways:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Master and slave on the same machine: one machine with the prerequisites described below is required.&lt;/li&gt; &lt;li&gt;Master and slave on different machines: two machines with the prerequisites described below are required.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Hardware Requirements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Operating system: Mac OS X (10.8 or later), Microsoft Windows 7 (SP1), Fedora (21 or later), or Red Hat Enterprise Linux 7&lt;/li&gt; &lt;li&gt;Memory: At least 2 GB; preferably 4 GB&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Software Requirements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Web browser (preferably Chrome or Firefox)&lt;/li&gt; &lt;li&gt;Git client, which can be downloaded &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"&gt;here&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Access to &lt;a href="http://github.com"&gt;http://github.com&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Requirements for Running JBoss AMQ 7 Broker&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;Java Runtime Engine (JRE) 1.8, which can be download &lt;a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"&gt;here&lt;/a&gt;.&lt;/li&gt; &lt;li style="list-style-type: none;"&gt;&lt;/li&gt; &lt;li&gt;LibAIO (optional).&lt;/li&gt; &lt;li&gt;AMQ 7 Broker from Red Hat Developer Portal, which can be download &lt;a href="https://developers.redhat.com/products/amq/download/"&gt;here&lt;/a&gt;. If you are using two different servers, install it on each server. Place the downloaded file &lt;code&gt;amq-broker-7.1.0-bin.zip&lt;/code&gt; in the installs directory: &lt;code&gt;[SRC_DIR]&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;A prepared, shared file system.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you are installing from a supported version of Red Hat Enterprise Linux, you can use the following &lt;code&gt;yum&lt;/code&gt; command to install prerequisites:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum install java-1.8.0-openjdk-devel git&lt;/code&gt;&lt;/p&gt; &lt;h1 id="projectdownload"&gt;Downloading the project&lt;/h1&gt; &lt;p&gt;Git clone &lt;a href="https://github.com/AbrahamArellano/amq-ha-shared-store-demo"&gt;this repository&lt;/a&gt; to &lt;code&gt;[GIT_SOURCE]&lt;/code&gt; and then change the directory name to &lt;code&gt;amq-ha-shared-store&lt;/code&gt;.&lt;/p&gt; &lt;h1 id="projectconfig"&gt;Configuring the Project&lt;/h1&gt; &lt;p&gt;Please read carefully the following configuration setup.&lt;/p&gt; &lt;p&gt;As mentioned in a previous section, the master and slave can be configured on the same machine or on different machines. A specific configuration, described below, is required in each case.&lt;/p&gt; &lt;h2&gt;Master and Slave on the Same Machine&lt;/h2&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-483557 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Same_Hosts.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Same_Hosts.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Same_Hosts.png 831w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Same_Hosts-300x199.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Same_Hosts-768x509.png 768w" sizes="(max-width: 831px) 100vw, 831px" /&gt;&lt;/p&gt; &lt;p&gt;Check and adjust the following scripts:&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;master_installer_script.sh&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Set the variables correctly:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 broker distribution.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SRC_DIR&lt;/code&gt;: location of the AMQ 7 installer &lt;code&gt;amq-broker-7.1.0-bin.zip&lt;/code&gt; file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SHARED_FILESYSTEM&lt;/code&gt;: shared file system location used for the master and the slave. &amp;#8220;Escape&amp;#8221; the characters.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;strong&gt;slave_installer_script.sh&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Set the variables correctly:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 broker distribution.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SRC_DIR&lt;/code&gt;: location of the AMQ 7 installer &lt;code&gt;amq-broker-7.1.0-bin.zip&lt;/code&gt; file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SHARED_FILESYSTEM&lt;/code&gt;: shared file system location used for the master and the slave. &amp;#8220;Escape&amp;#8221; the characters.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Master and Slave on Different Machines&lt;/h2&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-483547 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Different_Hosts.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Different_Hosts.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Different_Hosts.png 996w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Different_Hosts-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Article_AMQ_7_HA_Architecture_Overview_Shared_Stored_Different_Hosts-768x402.png 768w" sizes="(max-width: 996px) 100vw, 996px" /&gt;&lt;/p&gt; &lt;p&gt;Check and adjust the following scripts:&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;&amp;#8211; master_installer_script.sh&lt;br /&gt; &lt;/strong&gt;&lt;/h3&gt; &lt;h3&gt;&lt;strong&gt;&amp;#8211; slave_installer_script.sh&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Set the variables correctly:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 broker distribution.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SRC_DIR&lt;/code&gt;: location of the AMQ 7 installer &lt;code&gt;amq-broker-7.1.0-bin.zip&lt;/code&gt; file.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SHARED_FILESYSTEM&lt;/code&gt;: location of the shared file system used for the master and the slave. Be sure to &amp;#8220;escape&amp;#8221; the characters.&lt;/li&gt; &lt;li&gt;&lt;code&gt;MASTER_IP&lt;/code&gt;: IP address of the host where the AMQ master instance is deployed.&lt;/li&gt; &lt;li&gt;&lt;code&gt;MASTER_PORT&lt;/code&gt;: port of the master AMQ instance.&lt;/li&gt; &lt;li&gt;&lt;code&gt;SLAVE_IP&lt;/code&gt;: IP address of the host where the slave AMQ instance is installed&lt;strong&gt;.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;SLAVE_PORT&lt;/code&gt;: port of the slave AMQ instance.&lt;/li&gt; &lt;li&gt;&lt;code&gt;CONSOLE_PORT&lt;/code&gt;: port of the web console.&lt;/li&gt; &lt;li&gt;&lt;code&gt;CLUSTER_CONNECTION_NAME&lt;/code&gt;: name of the cluster connection.&lt;/li&gt; &lt;li&gt;&lt;code&gt;AMQ_MASTER&lt;/code&gt;: name of the current AMQ master instance. &lt;strong&gt;This allows you to install multiple instances on the same host.&lt;/strong&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;AMQ_SLAVE&lt;/code&gt;: name of the current AMQ slave instance. &lt;strong&gt;This allows you to install multiple instances on the same host.&lt;/strong&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h1 id="exec"&gt;Executing the Project: AMQ 7 Deployment&lt;/h1&gt; &lt;p&gt;Follow the instructions below to proceed with the installation of the project.&lt;/p&gt; &lt;h2&gt;Configure the Installer Script&lt;/h2&gt; &lt;p&gt;Configure the &lt;code&gt;product_installer_script.sh&lt;/code&gt; and execute it, as follows:&lt;br /&gt; 1.  First, configure the following variables:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: variable that contains the location of the AMQ 7 broker distribution&lt;/li&gt; &lt;li&gt;&lt;code&gt;SRC_DIR&lt;/code&gt;: location of the AMQ 7 installer &lt;code&gt;amq-broker-7.1.0-bin.zip&lt;/code&gt; file&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;2.  Then, execute the script &lt;code&gt;product_installer_script.sh&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/product_installer_script.sh&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;Install the Product with the Master and Slave on the Same Machine&lt;/h2&gt; &lt;p&gt;1.  Run the script &lt;code&gt;master_installer_script.sh&lt;/code&gt; on the host:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/master_installer_script.sh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;2.  Run the script &lt;code&gt;slave_installer_script.sh&lt;/code&gt; on the host:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/slave_installer_script.sh&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;Install the Product with the Master and Slave on Different Machines&lt;/h2&gt; &lt;p&gt;1.  Run the script &lt;code&gt;master_installer_script.sh&lt;/code&gt; on the master host:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/master_installer_script.sh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;2. Run the script &lt;code&gt;slave_installer_script.sh&lt;/code&gt; on the slave host:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/slave_installer_script.sh&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Finally, after successful deployment, you can test the cluster.&lt;/p&gt; &lt;h1 id="test"&gt;Testing AMQ 7&lt;/h1&gt; &lt;p&gt;In order to test your installation, the project provides a test suite composed of the following test scripts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_master_test_execution.sh&lt;/code&gt; produces 10 messages in the test queue of the master broker.&lt;/li&gt; &lt;li&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_slave_test_execution.sh&lt;/code&gt; produces 10 messages in the test queue of the slave broker.&lt;/li&gt; &lt;li&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_master_test_execution.sh&lt;/code&gt; consumes 100 messages from the test queue of the master broker.&lt;/li&gt; &lt;li&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_slave_test_execution.sh&lt;/code&gt; consumes 100 messages from the test queue of the slave broker.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In addition, there is a support script that sets up the test environment:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/create_queue_test.sh&lt;/code&gt; creates the test queue in the master broker. This script is triggered on the master broker.&lt;/p&gt; &lt;h2 id="testsetup"&gt;Set Up the Test Scripts&lt;/h2&gt; &lt;p&gt;Check that the following variables have the correct values in the following tests scripts:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/create_queue_test.sh&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 installation&lt;/li&gt; &lt;li&gt;&lt;code&gt;AMQ_MASTER&lt;/code&gt;: name of the current AMQ master instance&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_master_test_execution.sh&lt;/code&gt; and&lt;br /&gt; &lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_master_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 installation&lt;/li&gt; &lt;li&gt;&lt;code&gt;AMQ_MASTER&lt;/code&gt;: name of the current AMQ master instance&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_slave_test_execution.sh&lt;/code&gt; and&lt;br /&gt; &lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_slave_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 installation&lt;/li&gt; &lt;li&gt;&lt;code&gt;AMQ_SLAVE&lt;/code&gt;: name of the current AMQ slave instance&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Master Active Test&lt;/h2&gt; &lt;h3&gt;Producing Messages on the Master&lt;/h3&gt; &lt;p&gt;To send messages to the master broker, execute the following scripts:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/create_queue_test.sh&lt;/code&gt;&lt;br /&gt; and&lt;br /&gt; &lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_master_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;h3&gt;Browsing Messages on the Master&lt;/h3&gt; &lt;p&gt;Check the queue in the broker web console to verify that the queue received the messages:&lt;/p&gt; &lt;ol&gt; &lt;li style="text-align: left;"&gt;Open a web browser and navigate to the AMQ web console at &lt;code&gt;http://localhost:8161/hawtio&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In the left tree, navigate to &lt;strong&gt;127.0.0.1 &amp;#62; addresses &amp;#62; haQueue &amp;#62; queues &amp;#62; anycast &amp;#62; haQueue&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Browse&lt;/strong&gt; (refresh if necessary).&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The script should produce 10 messages.&lt;/p&gt; &lt;h3&gt;Consuming Messages on the Master&lt;/h3&gt; &lt;p&gt;To consume messages from the master broker, execute the following script:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_master_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;h2&gt;Slave Active Test&lt;/h2&gt; &lt;h3&gt;Producing Messages on the Slave&lt;/h3&gt; &lt;p&gt;To send messages to the slave, execute the following script:&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/producer_slave_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;h3&gt;Browsing Messages on the Slave&lt;/h3&gt; &lt;p&gt;Check the queue in the broker web console to verify that the queue received the messages:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Open a web browser and navigate to the AMQ web console at &lt;code&gt;http://localhost:8261/hawtio&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;In the left tree, navigate to &lt;strong&gt;127.0.0.1 &amp;#62; addresses &amp;#62; haQueue &amp;#62; queues &amp;#62; anycast &amp;#62; haQueue&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Browse&lt;/strong&gt; (refresh if necessary).&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The script should produce 10 messages.&lt;/p&gt; &lt;h3&gt;Consuming Messages on the Slave&lt;/h3&gt; &lt;p&gt;To consume messages from the slave broker, execute the following script&lt;strong&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;[GIT_SOURCE]/amq-ha-shared-store/test_scripts/consumer_slave_test_execution.sh&lt;/code&gt;&lt;/p&gt; &lt;h1 id="uninstall"&gt;Uninstalling AMQ 7&lt;/h1&gt; &lt;p&gt;In addition, the project provides two uninstallers for uninstalling the deployed AMQ 7 HA configuration.&lt;/p&gt; &lt;p&gt;1. First of all, execute the &lt;code&gt;uninstaller_script.sh&lt;/code&gt; script to stop and uninstall the AMQ 7 HA configuration.&lt;/p&gt; &lt;p&gt;2. Also, if required, configure and then execute the &lt;code&gt;uninstaller_persistence_script.sh&lt;/code&gt; script to delete the persistence.&lt;/p&gt; &lt;p&gt;3. On the scripts: &lt;code&gt;uninstaller_script.sh&lt;/code&gt; and &lt;code&gt;uninstaller_persistence_script.sh&lt;/code&gt; check that the following variables contain the correct values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;PRODUCT_HOME&lt;/code&gt;: location of the AMQ 7 broker distribution&lt;/li&gt; &lt;li&gt;&lt;code&gt;SHARED_FILESYSTEM&lt;/code&gt;: location of the shared file system used for the master and the slave&lt;/li&gt; &lt;/ul&gt; &lt;h1 id="collaboration"&gt;Collaboration&lt;/h1&gt; &lt;p&gt;This project is based on a project created by Hugo Guerrero, which is available on GitHub: &lt;a href="https://github.com/jbossdemocentral/amq-ha-replicated-demo"&gt;jbossdemocentral/amq-ha-replicated-demo&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;linkname=Automating%20AMQ%207%20High%20Availability%20Deployment" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fautomating-amq-7-high-availability-deployment%2F&amp;#38;title=Automating%20AMQ%207%20High%20Availability%20Deployment" data-a2a-url="https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/" data-a2a-title="Automating AMQ 7 High Availability Deployment"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/"&gt;Automating AMQ 7 High Availability Deployment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OMVspSdzYB0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat JBoss AMQ 7 provides fast, lightweight, and secure messaging for internet-scale applications. In addition, AMQ 7 components use industry-standard message protocols and support a wide range of programming languages and operating environments. Therefore, AMQ 7 gives you the strong foundation you need to build modern distributed applications. Especially relevant is that multiple instances [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/"&gt;Automating AMQ 7 High Availability Deployment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">482987</post-id><dc:creator>Abraham Francisco Arellano Tavara</dc:creator><dc:date>2018-04-25T10:55:57Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/</feedburner:origLink></entry><entry><title>Our Book Has Been Released! Introducing Istio Service Mesh for Microservices</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/MoeCqMzglpA/" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Service Mesh" /><category term="book" /><category term="books" /><category term="istio" /><category term="microservices" /><category term="service mesh" /><author><name>Christian Posta</name></author><id>https://developers.redhat.com/blog/?p=486767</id><updated>2018-04-25T10:55:51Z</updated><published>2018-04-25T10:55:51Z</published><content type="html">&lt;p&gt;Burr Sutter (&lt;a href="https://twitter.com/burrsutter"&gt;@burrsutter&lt;/a&gt;) and I (&lt;a href="https://twitter.com/christianposta"&gt;@christianposta&lt;/a&gt;) have finished &lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices/"&gt;writing a small book&lt;/a&gt; to help folks get up and running with &lt;a href="https://istio.io"&gt;Istio.io&lt;/a&gt; service mesh!&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices/"&gt;&lt;img class=" alignnone wp-image-486807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/istio-book.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/istio-book-221x300.png" alt="Book Cover" width="221" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/istio-book-221x300.png 221w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/istio-book.png 500w" sizes="(max-width: 221px) 100vw, 221px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Many many thanks to all of the reviewers who took the time to give feedback and to Red Hat for sponsoring my time—especially Burr Sutter and the talented folks at O’Reilly who helped coordinate the effort and make it come to fruition.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices/"&gt;Download the complimentary e-book at developers.redhat.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The book covers the following topics:&lt;/p&gt; &lt;p&gt;&lt;span id="more-486767"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;What is a service mesh?&lt;/li&gt; &lt;li&gt;Understanding Istio and the importance of its capabilities in a microservices architecture&lt;/li&gt; &lt;li&gt;How to do the following with Istio: &lt;ul&gt; &lt;li&gt;Resilience patterns&lt;/li&gt; &lt;li&gt;Routing patterns&lt;/li&gt; &lt;li&gt;Chaos testing&lt;/li&gt; &lt;li&gt;Security&lt;/li&gt; &lt;li&gt;Telemetry collection with tracing, metrics, and Grafana&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This book should be a nice quick intro to Istio. Please take a look at &lt;a href="http://istio.io/"&gt;Istio.io&lt;/a&gt; for more information. The book is based on a hands-on workshop the wonderful &lt;a href="http://developers.redhat.com/"&gt;Red Hat Developers team&lt;/a&gt; put together. Find the &lt;a href="https://github.com/redhat-developer-demos/istio-tutorial"&gt;latest version of the workshop&lt;/a&gt; as well as &lt;a href="https://github.com/redhat-developer-demos/istio-tutorial/tree/book"&gt;the branch from the book&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Printed Books&lt;/h3&gt; &lt;p&gt;We have printed books to give away at &lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt; in San Francisco. The conference will be May 8th–10th at the Moscone Center. We’ll also be doing a handful of microservices events across North America, which should be another opportunity to get printed copies. Or, reach out to me (&lt;a href="https://twitter.com/christianposta"&gt;@christianposta&lt;/a&gt;) and we’ll find a way to ship you a printed copy.&lt;/p&gt; &lt;h3&gt;What’s Next?&lt;/h3&gt; &lt;p&gt;Follow along on &lt;a href="http://blog.christianposta.com/"&gt;my blog&lt;/a&gt;, the &lt;a href="http://developers.redhat.com/blog/"&gt;Red Hat Developers blog&lt;/a&gt;, the &lt;a href="https://istio.io/blog"&gt;Istio.io blog&lt;/a&gt;, and the &lt;a href="http://istio.io/"&gt;Istio.io website&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Also &lt;a href="https://twitter.com/christianposta"&gt;stay tuned&lt;/a&gt; for the “Istio in Action” book that I’ll be writing for Manning.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;linkname=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F25%2Fbook-released-istio-service-mesh-microservices%2F&amp;#38;title=Our%20Book%20Has%20Been%20Released%21%20Introducing%20Istio%20Service%20Mesh%20for%20Microservices" data-a2a-url="https://developers.redhat.com/blog/2018/04/25/book-released-istio-service-mesh-microservices/" data-a2a-title="Our Book Has Been Released! Introducing Istio Service Mesh for Microservices"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/book-released-istio-service-mesh-microservices/"&gt;Our Book Has Been Released! Introducing Istio Service Mesh for Microservices&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/MoeCqMzglpA" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Burr Sutter (@burrsutter) and I (@christianposta) have finished writing a small book to help folks get up and running with Istio.io service mesh! Many many thanks to all of the reviewers who took the time to give feedback and to Red Hat for sponsoring my time—especially Burr Sutter and the talented folks at O’Reilly who [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/25/book-released-istio-service-mesh-microservices/"&gt;Our Book Has Been Released! Introducing Istio Service Mesh for Microservices&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/04/25/book-released-istio-service-mesh-microservices/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">486767</post-id><dc:creator>Christian Posta</dc:creator><dc:date>2018-04-25T10:55:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/25/book-released-istio-service-mesh-microservices/</feedburner:origLink></entry><entry><title>The Saga Pattern in Apache Camel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wZHrdy4aF5M/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_nicolaferraro" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="lra" scheme="searchisko:content:tags" /><category term="microprofile" scheme="searchisko:content:tags" /><category term="microservice" scheme="searchisko:content:tags" /><category term="narayana" scheme="searchisko:content:tags" /><category term="Saga" scheme="searchisko:content:tags" /><category term="spring-boot" scheme="searchisko:content:tags" /><author><name>Nicola Ferraro</name></author><id>searchisko:content:id:jbossorg_blog-the_saga_pattern_in_apache_camel</id><updated>2018-04-25T05:00:00Z</updated><published>2018-04-24T22:00:00Z</published><content type="html">&lt;p&gt;A new enterprise integration pattern has been added to Apache Camel (2.21.0): the “Saga” pattern. This article will show you why, when and how to use it in order to build robust and consistent applications in the cloud.&lt;/p&gt; &lt;h2 id="what-is-a-saga"&gt;What is a Saga?&lt;/h2&gt; &lt;p&gt;Although the name “Saga” has been widely misused recently, especially in the field of front-end development, in the context of distributed systems the term “Saga” always refers to a &lt;em&gt;pattern for coordinating actions in remote services in order to obtain a consistent outcome&lt;/em&gt;. Achieving consistency is something really useful in practice but also difficult, especially in microservice architectures that tend to split the processing logic into multiple autonomous services, usually communicating over HTTP.&lt;/p&gt; &lt;h2 id="what-do-you-mean-by-consistency"&gt;What do you mean by “Consistency”?&lt;/h2&gt; &lt;p&gt;There’s not a unique definition of the term “consistency”, but here I refer here to the widely accepted notion of &lt;em&gt;“keeping the system as a whole in a valid state”&lt;/em&gt; (and by &lt;em&gt;“valid”&lt;/em&gt; I mean: &lt;em&gt;“respecting all business invariants”&lt;/em&gt;).&lt;/p&gt; &lt;p&gt;Let’s try to make it more concrete with an &lt;em&gt;example&lt;/em&gt;. Suppose you have designed a system for a travel agency that allows you to buy a &lt;em&gt;trip from A to B&lt;/em&gt;, using two external (or internal) services to buy tickets for &lt;em&gt;train&lt;/em&gt; (service 1) or &lt;em&gt;plane&lt;/em&gt; (service 2).&lt;/p&gt; &lt;p&gt;From a business perspective, your main invariant here is simply stated:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;For any trip from A to B, the agency should buy tickets for all sub-routes (train or flight) that take the customer from A to B, or none of them&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;It means, in simple words, that when a user asks to go from London to Florence, the agency should buy a flight from London to Rome and a train from Rome to Florence. But it should never buy a train from Rome to Florence if the flight from London to Rome is full (or too expensive). We should buy the full trip or tell the user that the trip cannot be reserved.&lt;/p&gt; &lt;p&gt;But the problem is that we have &lt;strong&gt;two distinct systems&lt;/strong&gt; for buying train tickets and reserving flights. How do we &lt;strong&gt;coordinate&lt;/strong&gt; them?&lt;/p&gt; &lt;p&gt;Now, use your imagination, this is a &lt;strong&gt;very common problem&lt;/strong&gt; and happens in many contexts!&lt;/p&gt; &lt;h2 id="how-did-people-use-to-solve-this-problem-transactions"&gt;How did people use to solve this problem? (Transactions)&lt;/h2&gt; &lt;p&gt;This is a classic problem in distributed systems and the traditional way to solve it is… with &lt;em&gt;transactions&lt;/em&gt;, of course!&lt;/p&gt; &lt;p&gt;I’ve been a consultant for many years and I can tell you that the most common architecture used by people is the big monolith with a gigantic relational database where multiple application modules store data (and sometimes also communicate by writing and reading data from the DB).&lt;/p&gt; &lt;p&gt;So if that is your architecture, the problem is simply solved by wrapping the calls to the &lt;em&gt;flight module&lt;/em&gt; and the &lt;em&gt;train module&lt;/em&gt; inside a transaction, so that if one of the two calls fails, &lt;em&gt;the whole transaction is rolled back and your system preserves the invariant&lt;/em&gt; (transactions are indeed ACID, where the C means “consistency”).&lt;/p&gt; &lt;p&gt;And what if the system is distributed? Well, there are &lt;em&gt;distributed transactions&lt;/em&gt;. One of the most widely used specification for distributed transaction is &lt;em&gt;XA&lt;/em&gt; and it allows applications and resources to execute actions in the context of a globally defined transaction that preserve the ACID properties. So you can have a ACID transaction that can span multiple databases or even multiple distributed services (the transactional context can be propagated across services).&lt;/p&gt; &lt;h2 id="so-why-dont-we-just-use-distributed-transactions"&gt;So, why don’t we just use distributed transactions?&lt;/h2&gt; &lt;p&gt;There are many drawbacks to using distributed transactions.&lt;/p&gt; &lt;p&gt;The most evident one is that protocols and specifications for propagating a transaction context between two remote services are missing or under-developed when we want to connect services developed using different languages. Java is probably the language that has the best support for local and distributed transactions, but many &lt;strong&gt;other languages completely lack support for the most basic features&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;But also in Java, if you use a &lt;strong&gt;NoSQL&lt;/strong&gt; database instead of a good old RDBMS, chances that you can use (ACID) transactions are pretty low.&lt;/p&gt; &lt;p&gt;And what if you want to use an &lt;strong&gt;asynchronous toolkit&lt;/strong&gt; like Rx-Java on Vert.x or Project Reactor on Spring-Boot 2? Now &lt;strong&gt;chances&lt;/strong&gt; that you can use transactions are &lt;strong&gt;close to zero&lt;/strong&gt; (although there’s some work going on…).&lt;/p&gt; &lt;p&gt;But there are other reasons why one would avoid using distributed transactions in the context of microservice architectures or distributed systems in general. One reason is that a transaction often causes locks to be created on resources and when you have something unreliable between parts of your system, like the network, it may be the case that the locks are kept for a time longer than expected, creating also issues to other parts of the application.&lt;/p&gt; &lt;p&gt;This problem becomes more important when the two services that want to participate in a transaction belong to two &lt;em&gt;distinct organizations&lt;/em&gt;. If you &lt;strong&gt;ask an architect&lt;/strong&gt; to connect two services in a way that a &lt;strong&gt;problem in one service may also propagate to the other&lt;/strong&gt;, that architect would probably think twice before doing such choice (or better three times). And distributed transactions are a kind of &lt;strong&gt;heavyweight link&lt;/strong&gt; between services that one would like to avoid. A service running slowly increases the duration of global transactions also in the other services. A failure of one service may leave locks in the database of another service for too long.&lt;/p&gt; &lt;p&gt;In summary, if you want to use distributed transactions, you also need to &lt;strong&gt;trust the other side..&lt;/strong&gt;&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/post-saga-transactions-meme.jpg" alt="Transactions may have unexpected consequences" /&gt; &lt;/p&gt; &lt;p&gt;That’s probably the main reason why people prefer to keep the boundaries of distributed transactions very narrow (and make use of distributed transactions only when necessary).&lt;/p&gt; &lt;h2 id="and-now-we-have-sagas"&gt;And now we have Sagas&lt;/h2&gt; &lt;p&gt;You may have heard of sagas in a talk about domain-driven design (DDD) or event-sourcing. In fact sagas are a central part of both approaches. But a saga is not necessarily linked to that context, it’s a generic pattern that can be used to coordinate remote services.&lt;/p&gt; &lt;p&gt;In fact, since version 2.21.0 of Apache Camel, it has become a &lt;strong&gt;enterprise integration pattern (EIP)&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;A Saga can be defined as:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;A series of actions that belong to a business activity that should be all executed correctly by (remote) participants or otherwise compensated&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Sagas fit more naturally into the way the natural world works (at least, our understanding of it). Let’s take the previous example of the travel agency and suppose a user wants to reserve a trip that includes buying a train ticket and a flight.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A system developed with &lt;strong&gt;transactions&lt;/strong&gt; would try to &lt;strong&gt;reserve both&lt;/strong&gt; the flight and the train ticket &lt;strong&gt;at the same time&lt;/strong&gt;. If it doesn’t succeed, none of them will be booked.&lt;/li&gt; &lt;li&gt;A system using the &lt;strong&gt;saga pattern&lt;/strong&gt; will try to &lt;strong&gt;reserve the train and the flight independently. In case of failure&lt;/strong&gt; in one of the two reservations, &lt;strong&gt;the other one will be canceled&lt;/strong&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For this reason, a &lt;strong&gt;saga does exactly what a human would do&lt;/strong&gt; in this scenario: check if the full trip can be reserved, try to book, then cancel in the event of issues.&lt;/p&gt; &lt;p&gt;On the other side:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;There is no such thing as a transaction in the real world&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Yes, ask Walter White if you don’t believe me…&lt;/p&gt; &lt;h2 id="sagas-in-apache-camel"&gt;Sagas in Apache Camel&lt;/h2&gt; &lt;p&gt;Designing a saga is fairly easy in Apache Camel. Let’s see an example.&lt;/p&gt; &lt;p&gt;I’ve designed a sample quickstart system with the following (microservice) architecture.&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/saga-quickstart-system.png" alt="Saga Quickstart System" /&gt; &lt;/p&gt; &lt;p&gt;The full example is available here: &lt;a href="https://github.com/nicolaferraro/camel-saga-quickstart"&gt;https://github.com/nicolaferraro/camel-saga-quickstart&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can see the following services:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;API Gateway&lt;/strong&gt;: a sample camel app that is the main entry point (and will continuously start sagas simulating real users)&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Flight Service&lt;/strong&gt;: a service that sells flights&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Train Service&lt;/strong&gt;: a service that sells train tickets&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Payment Service&lt;/strong&gt;: a service that allows both services to request payments&lt;/li&gt; &lt;li&gt;The big &lt;strong&gt;“C”&lt;/strong&gt; in the middle is a &lt;strong&gt;LRA Coordinator&lt;/strong&gt; (see below!)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The basic workflow is:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;The saga starts&lt;/li&gt; &lt;li&gt;The gateway will reserve a flight (include payment)&lt;/li&gt; &lt;li&gt;The gateway will buy a train ticket (include payment)&lt;/li&gt; &lt;li&gt;Saga is completed (or compensated in case of issues)&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;But since &lt;strong&gt;I am evil&lt;/strong&gt;, I’ve made the &lt;strong&gt;payment service to fail with 15% probability&lt;/strong&gt;. This means that e.g. if the payment service fails during the flight reservation process, we should cancel the reservation. But in any case (succeeded or not), we should also cancel the train reservation if it has happened in the meantime.&lt;/p&gt; &lt;p&gt;It sounds complex to maintain all services (train, flight and payment) in a consistent state, but I’ll show you it’s &lt;strong&gt;fairly easy with the Saga EIP in Apache Camel&lt;/strong&gt;.&lt;/p&gt; &lt;h2 id="so-show-me-the-code"&gt;So, show me the code!&lt;/h2&gt; &lt;h3 id="camel-api-gateway"&gt;Camel API gateway&lt;/h3&gt; &lt;p&gt;Writing the main gateway route is straightforward:&lt;/p&gt; &lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"timer:clock?period=5s"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- replace it with rest() definition to create a real gateway&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saga&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- start a new saga&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHeader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TIMER_COUNTER&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHeader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exchange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;HTTP_METHOD&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Executing saga #${header.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http4://camel-saga-train-service:8080/api/train/buy/seat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- action 1&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http4://camel-saga-flight-service:8080/api/flight/buy"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- action 2&lt;/span&gt; &lt;span class="c1"&gt;// you can also .multicast() the two calls&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And this completes the saga definition.&lt;/p&gt; &lt;p&gt;Ok, we need also to write the services, but writing them is also easy.&lt;/p&gt; &lt;h3 id="camel-saga-aware-service"&gt;Camel Saga-aware Service&lt;/h3&gt; &lt;p&gt;Let’s take the train service as an example. A Camel saga-aware service can be implemented like this:&lt;/p&gt; &lt;div class="language-java highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;&lt;span class="n"&gt;rest&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/train/buy/seat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;param&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RestParamType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;endParam&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- from caller&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saga&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- join the saga with "supports" propagation&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;propagation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SagaPropagation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;SUPPORTS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compensation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"direct:cancelPurchase"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- the compensation endpoint&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Buying train seat #${header.id}"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http4://camel-saga-payment-service:8080/api/pay?bridgeEndpoint=true&amp;amp;type=train"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- propagate saga to payment service&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Payment for train #${header.id} done"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"direct:cancelPurchase"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- The compensation route&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Train purchase #${header.id} has been cancelled"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;And that’s it.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;compensation endpoint&lt;/strong&gt; is just the endpoint that must be called in order to cancel a reservation. It’s declared in the main route and invoked by Camel when it’s necessary to compensate (Camel detects failures in any point of the Saga and reacts accordingly).&lt;/p&gt; &lt;p&gt;Look at the &lt;a href="https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/saga-eip.adoc"&gt;Camel Saga EIP documentation&lt;/a&gt;. There are many other options and features you can use. E.g.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Adding timeouts for saga completion&lt;/li&gt; &lt;li&gt;Receiving saga completion callbacks&lt;/li&gt; &lt;li&gt;Asynchronous saga execution&lt;/li&gt; &lt;/ul&gt; &lt;h3 id="running-the-example"&gt;Running the example&lt;/h3&gt; &lt;p&gt;The example can be run on Openshift. Just install &lt;a href="https://github.com/minishift/minishift/releases"&gt;Minishift&lt;/a&gt;, connect to it and use the following commands to start everything.&lt;/p&gt; &lt;div class="language-sh highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt;git clone git@github.com:nicolaferraro/camel-saga-quickstart.git &lt;span class="nb"&gt;cd &lt;/span&gt;camel-saga-quickstart oc create &lt;span class="nt"&gt;-f&lt;/span&gt; lra-coordinator.yaml mvn clean fabric8:deploy &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It leverages the &lt;a href="http://maven.fabric8.io/"&gt;fabric8 maven plugin&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="how-do-camel-saga-and-long-running-actions-work"&gt;How do Camel Saga and “Long Running Actions” work&lt;/h2&gt; &lt;p&gt;If you arrived here you may be wondering how this saga machinery works under the hood.&lt;/p&gt; &lt;p&gt;Saga is a Camel EIP and can have different implementations. The base implementation keeps all data about the status of every saga in memory, so it’s not fault-tolerant. If the application crashes, everything is lost. Also, propagation across services cannot be used with the base implementation.&lt;/p&gt; &lt;p&gt;But Camel 2.21.0 ships also a new module called &lt;strong&gt;camel-lra&lt;/strong&gt; and a spring-boot starter (camel-lra-starter).&lt;/p&gt; &lt;p&gt;LRA stands for “Long Running Action”, that is the name of a Microprofile specification under-development (see &lt;a href="https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA"&gt;microprofile-lra&lt;/a&gt;). Its main implementation is already available and developed by the Narayana team in &lt;a href="https://github.com/jbosstm/narayana/tree/master/rts/lra"&gt;https://github.com/jbosstm/narayana/tree/master/rts/lra&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I’ve provided Openshift resources to install a basic LRA coordinator in the quickstart example (file &lt;code class="highlighter-rouge"&gt;lra-coordinator.yaml&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;In spring-boot, the &lt;code class="highlighter-rouge"&gt;camel-lra&lt;/code&gt; service can be enabled by adding the &lt;code class="highlighter-rouge"&gt;camel-lra-starter&lt;/code&gt; module to the &lt;code class="highlighter-rouge"&gt;pom.xml&lt;/code&gt; file and the standard Spring-Boot &lt;code class="highlighter-rouge"&gt;application.yml&lt;/code&gt; file:&lt;/p&gt; &lt;div class="highlighter-rouge"&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight"&gt;&lt;code&gt; camel: service: lra: enabled: true coordinator-url: http://lra-coordinator:8080 local-participant-url: http://my-url-as-seen-by-coordinator:8080/context-path &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;You need to set the &lt;code class="highlighter-rouge"&gt;camel.service.lra.enabled=true&lt;/code&gt; flag (so it will be the backing implementation of the &lt;code class="highlighter-rouge"&gt;.saga()&lt;/code&gt; EIP) and provide:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The coordinator base URL&lt;/li&gt; &lt;li&gt;The participant (&lt;em&gt;this&lt;/em&gt; service) base url in order to receive callbacks from the coordinator&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Note that these two settings are &lt;a href="https://github.com/nicolaferraro/camel-saga-quickstart/blob/03edc9eab657c0bae145b4c97c2d05ddaf0bf794/camel-saga-train-service/src/main/fabric8/deployment.yml#L6-L9"&gt;overridden when running the quickstart inside Openshift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Yes, in case you’re wondering, &lt;strong&gt;the coordinator and the participant services communicate over REST&lt;/strong&gt;. This allows to easily extend support for LRA to other languages.&lt;/p&gt; &lt;p&gt;A LRA coordinator is a &lt;strong&gt;stateful component&lt;/strong&gt;. Indeed it’s the only stateful piece of the quickstart but you don’t need to customize it. It’s a generic component that your application will just use through the &lt;code class="highlighter-rouge"&gt;camel-lra&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;Being stateful and persistent, it adds fault tolerance to your application: your business invariants are &lt;em&gt;eventually&lt;/em&gt; respected even in the case of failure.&lt;/p&gt; &lt;h2 id="a-brief-overview-of-the-protocol"&gt;A Brief Overview of the Protocol&lt;/h2&gt; &lt;p&gt;Nothing magic happens under the hood. The protocol is fairly simple and is explained briefly by the following diagram:&lt;/p&gt; &lt;p style="text-align: center"&gt; &lt;img src="/images/lra-sequence-diagram.png" alt="LRA Sequence Diagram" /&gt; &lt;caption align="bottom"&gt;&lt;i&gt;Sequence diagram of a failed LRA saga&lt;/i&gt;&lt;/caption&gt; &lt;/p&gt; &lt;p&gt;Here &lt;code class="highlighter-rouge"&gt;service&lt;/code&gt; is the application starting the saga (the API Gateway in the previous example). &lt;em&gt;Before&lt;/em&gt; doing any operation, it &lt;strong&gt;first creates a saga&lt;/strong&gt; (&lt;em&gt;startLRA&lt;/em&gt; operation) by communicating with the coordinator (REST).&lt;/p&gt; &lt;p&gt;Then, it can talk with other services: &lt;code class="highlighter-rouge"&gt;Service1&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Service2&lt;/code&gt; in the picture. The &lt;strong&gt;Long-Running-Action&lt;/strong&gt; HTTP header is used to &lt;strong&gt;propagate the LRA context to the downstream services&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Before&lt;/em&gt; &lt;code class="highlighter-rouge"&gt;Service1&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Service2&lt;/code&gt; do any operation they &lt;strong&gt;join the saga by registering a compensating action (Camel URI)&lt;/strong&gt; in the coordinator (&lt;em&gt;addCompensator&lt;/em&gt; operation, another REST call).&lt;/p&gt; &lt;p&gt;Then, after the main actions are executed, the whole saga can complete normally (everything fine) or exceptionally (like in the diagram). In case of abnormal termination of the saga, the &lt;strong&gt;LRA coordinator will ensure&lt;/strong&gt; that all registered compensating actions are called.&lt;/p&gt; &lt;p&gt;And what if a compensating action fails? Of course, the coordinator will retry again and again. This means that compensating actions must be &lt;strong&gt;idempotent&lt;/strong&gt; and assume they might be called more than once.&lt;/p&gt; &lt;h2 id="caveats"&gt;Caveats&lt;/h2&gt; &lt;h3 id="idempotency-and--commutativity"&gt;Idempotency and … “Commutativity”&lt;/h3&gt; &lt;p&gt;We have seen that a compensating action must be idempotent, because the LRA coordinator can call it multiple times, especially in case of network error or application unavailability.&lt;/p&gt; &lt;p&gt;But there’s a more severe restriction that you need to respect in order to write correct services: &lt;strong&gt;a compensating action should be commutative w.r.t. the main action&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;It means that, since we are in a distributed environment, sometimes the compensating action may be called by the LRA coordinator before the main action has completed (or has even started).&lt;/p&gt; &lt;p&gt;So, for example, your train service must be able to cancel a reservation even if such reservation is still not present in the system, and the reservation must be considered already canceled when (and if) it’s created by a late running main action in the future.&lt;/p&gt; &lt;p&gt;Sometimes it can be hard to satisfy the commutativity restriction… but there can be alternative solutions…&lt;/p&gt; &lt;h2 id="a-bit-of-qa"&gt;A Bit of Q&amp;amp;A&lt;/h2&gt; &lt;p&gt;&lt;em&gt;Is the LRA Coordinator a single point of failure?&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Not necessarily, e.g. the Narayana team is working to provide scalability and failover for the coordinator.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Isn’t a Saga just a kind of distributed transaction?&lt;/em&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No, a saga is composed of independent actions that are executed in different services during a long timespan (a transaction completes within few seconds, usually).&lt;/li&gt; &lt;li&gt;It’s true that in some cases you need to register a completion-callback in the downstream service to finalize the action and this is similar with what happens with 2-phase-commit transactions. But this is not always necessary. E.g. the train service above has not registered any &lt;em&gt;completion&lt;/em&gt; endpoint because once a seat is reserved by one customer, it cannot be reserved by another one, and it does not matter if the reservation is confirmed (saga completed) or not (saga in progress).&lt;/li&gt; &lt;/ul&gt; &lt;h2 id="resources"&gt;Resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/nicolaferraro/camel-saga-quickstart"&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/saga-eip.adoc"&gt;Camel Saga EIP&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/apache/camel/blob/master/components/camel-lra/src/main/docs/lra.adoc"&gt;Camel LRA&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/eclipse/microprofile-sandbox/tree/master/proposals/0009-LRA"&gt;Microprofile LRA (Sandbox)&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Have Fun!&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wZHrdy4aF5M" height="1" width="1" alt=""/&gt;</content><summary>A new enterprise integration pattern has been added to Apache Camel (2.21.0): the “Saga” pattern. This article will show you why, when and how to use it in order to build robust and consistent applications in the cloud. What is a Saga? Although the name “Saga” has been widely misused recently, especially in the field of front-end development, in the context of distributed systems the term “Saga” a...</summary><dc:creator>Nicola Ferraro</dc:creator><dc:date>2018-04-24T22:00:00Z</dc:date><feedburner:origLink>https://www.nicolaferraro.me/2018/04/25/saga-pattern-in-apache-camel/</feedburner:origLink></entry><entry><title>Istio Smart Canary Launch: Easing Into Production</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/M4GZsvQTy7M/" /><category term="Cloud" /><category term="Containers" /><category term="Java" /><category term="Microservices" /><category term="Node.js" /><category term="Red Hat OpenShift Container Platform" /><category term="Service Mesh" /><category term="canary deployment" /><category term="frameworks" /><category term="istio" /><category term="kubernetes" /><category term="microservices" /><category term="Red Hat OpenShift" /><category term="service mesh" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=487357</id><updated>2018-04-24T21:00:10Z</updated><published>2018-04-24T21:00:10Z</published><content type="html">&lt;blockquote&gt;&lt;p&gt;First to fall over when the atmosphere is less than perfect&lt;/p&gt; &lt;p&gt;Your sensibilities are shaken by the slightest defect&lt;/p&gt; &lt;p&gt;You live your life like a canary in a coalmine&amp;#8230;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;When Sting and The Police sang those lyrics, I doubt they had microservices, Istio, Kubernetes, and OpenShift in mind. Yet here we are, years later, using the Canary Deployment pattern to ease code into production.&lt;/p&gt; &lt;p&gt;[This is part eight of my ten-week &lt;strong&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/"&gt;Introduction to Istio series&lt;/a&gt;&lt;/strong&gt;.  My previous article was &lt;a href="https://developers.redhat.com/blog/2018/04/17/istio-dark-launch-secret-services/"&gt;Part 7: Istio Dark Launch: Secret Services&lt;/a&gt;.]&lt;span id="more-487357"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Proceed with Caution&lt;/h2&gt; &lt;p&gt;If you&amp;#8217;re not familiar with the Canary Deployment pattern, it&amp;#8217;s quite simple: You start up your next version of your software&amp;#8211;a microservice, in our case&amp;#8211;and then grant limited access to a small group of users. If that is a success, you slowly grow the group of users until the software either fails&amp;#8211;the canary in the coal mine died&amp;#8211;or you successfully reach 100 percent of users. By purposefully and carefully easing your software into production, and by intelligently deciding which users will request the new version, you can limit the risk and maximize the feedback.&lt;/p&gt; &lt;p&gt;Of course, Istio makes this easy while giving you several good options for intelligent routing. And&amp;#8211;you may have heard this before&amp;#8211;you can do it all without changing your source code.&lt;/p&gt; &lt;h2&gt;Searching for Safari&lt;/h2&gt; &lt;p&gt;One easy routing criteria is to allow only certain browers to have access to your site. For example, let&amp;#8217;s say you want to limit access to Safari users so that they use version 2 of your microservice. The following Istio route rule will do just that:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-487447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-19-at-3.47.53-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-19-at-3.47.53-PM.png" alt="" width="628" height="778" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-19-at-3.47.53-PM.png 628w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-19-at-3.47.53-PM-242x300.png 242w" sizes="(max-width: 628px) 100vw, 628px" /&gt;&lt;/p&gt; &lt;p&gt;After applying this route rule, we can launch a loop of &lt;code&gt;curl&lt;/code&gt; requests from the command line to the microservice to mimic real-life activity. The result is that only version 1 of our microservice is responding to the requests:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-487887 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.15-PM-1024x525.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.15-PM-1024x525.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.15-PM-1024x525.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.15-PM-300x154.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.15-PM-768x394.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;Where is the version 2 traffic? Well, in my particular case, since I&amp;#8217;m running &lt;code&gt;curl&lt;/code&gt; from the command line, all of the traffic is being routed to version 1. Notice that at the end of the above screen capture, I run the request from my browser (Safari), which results in this:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-487897 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM-1024x144.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM-1024x144.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM-1024x144.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM-300x42.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM-768x108.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.40.26-PM.png 1490w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Unlimited Power&lt;/h2&gt; &lt;p&gt;As you probably noticed, using a regular expression to route requests is very powerful. Consider this following example; I&amp;#8217;m sure you can easily figure out what it does:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-487907 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.44.32-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.44.32-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.44.32-PM.png 630w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-23-at-3.44.32-PM-276x300.png 276w" sizes="(max-width: 630px) 100vw, 630px" /&gt;&lt;/p&gt; &lt;p&gt;Given these examples, you are probably already imagining what you can do.&lt;/p&gt; &lt;h2&gt;Being Smart About It&lt;/h2&gt; &lt;p&gt;Smart routing, particularly the ability to use regular expressions against request headers, means you can direct traffic however you want as you ease new code into production. It&amp;#8217;s easy, requires no changes to your source code, and can be quickly undone if necessary.&lt;/p&gt; &lt;h2&gt;I Want More&lt;/h2&gt; &lt;p&gt;Want more? Want to start experimenting with Istio, Kubernetes, and OpenShift on your own PC? Perhaps follow a tutorial? You&amp;#8217;re in luck: We (the &lt;a href="https://developers.redhat.com/about/"&gt;Red Hat Developer team&lt;/a&gt;) have put together &lt;a href="https://github.com/redhat-developer-demos/istio-tutorial"&gt;this awesome tutorial&lt;/a&gt;. We also have made available all the bits you need. Simply surf over to the tutorial and knock yourself out.&lt;/p&gt; &lt;p&gt;I guess you could say it will really make your deployments sing.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;All articles in the &amp;#8220;Introduction to Istio&amp;#8221; series:&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Part 1: &lt;a href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/"&gt;Introduction to Istio; It Makes a Mesh of Things&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 2: &lt;a href="https://developers.redhat.com/blog/2018/03/13/istio-route-rules-service-requests/"&gt;Istio Route Rules: Telling Service Requests Where to Go&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3: &lt;a href="https://developers.redhat.com/blog/2018/03/20/istio-circuit-breaker-pool-ejection/"&gt;Istio Circuit Breaker: How to Handle (Pool) Ejection&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4: &lt;a href="https://developers.redhat.com/blog/2018/03/27/istio-circuit-breaker-when-failure-is-an-option/"&gt;Istio Circuit Breaker: When Failure Is an Option&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 5: &lt;a href="https://developers.redhat.com/blog/2018/04/03/istio-tracing-monitoring/"&gt;Istio Tracing &amp;#38; Monitoring: Where Are You and How Fast Are You Going?&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 6: &lt;a href="https://developers.redhat.com/blog/2018/04/10/istio-chaos-engineering/"&gt;Istio Chaos Engineering: I Meant to Do That&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 7: &lt;a href="https://developers.redhat.com/blog/2018/04/17/istio-dark-launch-secret-services/"&gt;Istio Dark Launch: Secret Services&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 8: &lt;a href="https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/"&gt;Istio Smart Canary Launch: Easing into Production&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;linkname=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fistio-smart-canary-launch%2F&amp;#38;title=Istio%20Smart%20Canary%20Launch%3A%20Easing%20Into%20Production" data-a2a-url="https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/" data-a2a-title="Istio Smart Canary Launch: Easing Into Production"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/"&gt;Istio Smart Canary Launch: Easing Into Production&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/M4GZsvQTy7M" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;First to fall over when the atmosphere is less than perfect Your sensibilities are shaken by the slightest defect You live your life like a canary in a coalmine&amp;#8230; When Sting and The Police sang those lyrics, I doubt they had microservices, Istio, Kubernetes, and OpenShift in mind. Yet here we are, years later, using [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/"&gt;Istio Smart Canary Launch: Easing Into Production&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">487357</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2018-04-24T21:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/24/istio-smart-canary-launch/</feedburner:origLink></entry><entry><title>jBPM Work Items repository tips + tricks</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/tTHxzTPpsTU/jbpm-work-items-repository-tips-tricks.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-jbpm_work_items_repository_tips_tricks</id><updated>2018-04-24T16:46:17Z</updated><published>2018-04-24T16:46:00Z</published><content type="html">In &lt;a href="http://mswiderski.blogspot.com/2018/04/jbpm-work-items-are-really-simple.html"&gt;his previous post&lt;/a&gt;, Maciej showcased the updates to the &lt;a href="https://github.com/kiegroup/jbpm-work-items"&gt;jBPM Work Items module&lt;/a&gt; and how easy it is now to get up and running with creating new workitems and start using them in your business processes right away.&lt;br /&gt;&lt;br /&gt;In this post I wanted to leverage on what Maciej showed and add a couple of cool features that the jBPM Work Item repository gives you out of the box, specifically related to the repository content generation.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;1. Skinning&lt;/b&gt;&lt;br /&gt;By default the work item repository generates static content including all workitem info, documentation and download links. Here is what they look like out of the box:&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-QD-fGN1FTI4/Wt9J2etEMiI/AAAAAAAAfCI/tTw0OxOfV3EATXsB1mMj6R9JdWH5vWqFwCLcBGAs/s1600/Screen%2BShot%2B2018-04-24%2Bat%2B11.23.19%2BAM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="927" data-original-width="1600" height="231" src="https://4.bp.blogspot.com/-QD-fGN1FTI4/Wt9J2etEMiI/AAAAAAAAfCI/tTw0OxOfV3EATXsB1mMj6R9JdWH5vWqFwCLcBGAs/s400/Screen%2BShot%2B2018-04-24%2Bat%2B11.23.19%2BAM.png" width="400" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;1. Default repository index page&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-HllAb0UguSU/Wt9KcYUKfQI/AAAAAAAAfCQ/UPOL6pEsGIc0gBV_jl7SIxA3JiiOlIG9QCEwYBhgL/s1600/Screen%2BShot%2B2018-04-24%2Bat%2B11.25.51%2BAM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="1556" data-original-width="1242" height="320" src="https://2.bp.blogspot.com/-HllAb0UguSU/Wt9KcYUKfQI/AAAAAAAAfCQ/UPOL6pEsGIc0gBV_jl7SIxA3JiiOlIG9QCEwYBhgL/s320/Screen%2BShot%2B2018-04-24%2Bat%2B11.25.51%2BAM.png" width="254" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;2. Default workitem documentation page&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;Using the default look/feel is fine, but there are cases you might want to change it to fit your company/business better by changing the colors, adding your logo, or even completely change the layout of these pages and here is how you can do it.&amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The &lt;a href="https://github.com/kiegroup/jbpm-work-items"&gt;jBPM work items module&lt;/a&gt; includes a sub-module called &lt;a href="https://github.com/kiegroup/jbpm-work-items/tree/master/template-resources/src/main/resources"&gt;template-resources&lt;/a&gt;. In this module you can find all related templates that are used to build your final repository content. Lets take a look at these files to find out what each dose:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;a) &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/template-resources/src/main/resources/repoheader.html"&gt;repoheader.html &lt;/a&gt;and &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/template-resources/src/main/resources/repofooter.html"&gt;repofooter.html&lt;/a&gt;&amp;nbsp;- responsible for the top and bottom part of your repository index page. You can change these to for example define different page colors, add your logo to it, etc. Whatever you feel like.&amp;nbsp;&lt;/div&gt;&lt;div&gt;b) &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/template-resources/src/main/resources/repoindex.part"&gt;repoindex.part&lt;/a&gt;- defines each workitem information (each table row on the repository index page). You can change this to change the display for each of your workitems, add/remove download links etc.&lt;/div&gt;&lt;div&gt;c) &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/template-resources/src/main/resources/indextemplate.st"&gt;indextemplate.st&lt;/a&gt;&amp;nbsp;- this is a StringTemplate file that is used by each workitem module to generate its documentation page. Again you have free reign to change the look/feel of your workitem documentation as you wish.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With little knowledge of html (and power of jQuery and Boostrap that are built in) you can customize your workitem repository, for example (I'm not a designer btw :):&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-r9KbMB3Iyo8/Wt9bSJrU3-I/AAAAAAAAfCk/Pz5OmLdfe-YUgPyhBVt4JhqyLpsLcZyKwCLcBGAs/s1600/Screen%2BShot%2B2018-04-24%2Bat%2B12.37.41%2BPM.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" data-original-height="1534" data-original-width="1416" height="320" src="https://2.bp.blogspot.com/-r9KbMB3Iyo8/Wt9bSJrU3-I/AAAAAAAAfCk/Pz5OmLdfe-YUgPyhBVt4JhqyLpsLcZyKwCLcBGAs/s320/Screen%2BShot%2B2018-04-24%2Bat%2B12.37.41%2BPM.png" width="295" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;3) "Skinned" workitem repository index page&lt;br /&gt;&lt;br /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;2. Excluding workitems from generated repository content&lt;/b&gt;&lt;/div&gt;&lt;div&gt;By default all workitems in the jBPM work items module will be displayed in the generated repository. You may not want to expose all of the available ones to your clients and can control which ones you wish to expose via the repository &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/repository/assembly/assembly.xml"&gt;Maven assembly descriptor&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;Here in the dependencySet section you can define excludes on the workitems you do not wish to display. Let's say you do not want to show the Archive and Dropbox workitems, you would do:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style="background-color: white; font-family: Menlo; font-size: 9pt;"&gt;&lt;span style="background-color: #efefef;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;excludes&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span style="background-color: #efefef;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;${project.groupId}:repository-springboot&lt;span style="background-color: #efefef;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span style="background-color: #efefef;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;${project.groupId}:archive-workitem&lt;span style="background-color: #efefef;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt; &lt;span style="background-color: #efefef;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;${project.groupId}:dropbox-workitem&lt;span style="background-color: #efefef;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;exclude&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="background-color: #efefef;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;excludes&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; font-family: Menlo; font-size: 9pt;"&gt;&lt;span style="background-color: #efefef;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; font-family: Menlo; font-size: 9pt;"&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;and those will not show up in the generated repository content any more.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;b&gt;3. Generating additional download content using workitem handler information&lt;/b&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;By default each workitem in the repository might have one or more handler implementations. Each handler describes itself via the @Wid annotation, &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/twitter-workitem/src/main/java/org/jbpm/process/workitem/twitter/SendDirectMessageWorkitemHandler.java#L34"&gt;here is an example handler for sending Twitter messages&lt;/a&gt;.&amp;nbsp; During compilation step of your handlers repository gathers the info from this annotations and uses it to generate the workitem defintion configuration, the json config, the deployment descriptor xml, etc etc. You may want to generate additional configuration files that currently do not exist.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;This can be configured in the &lt;a href="https://github.com/kiegroup/jbpm-work-items/blob/master/pom.xml#L623"&gt;main project's pom.xml&lt;/a&gt;&amp;nbsp;file. Here you can add more or remove existing config files generated from the annotation information in your workitem handlers.&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;I hope this info will be of some help to you guys. As always if there are any questions or if you have ideas on how to further enhance the workitem repository feel free to ask.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style="font-family: Times; font-size: medium; white-space: normal;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/tTHxzTPpsTU" height="1" width="1" alt=""/&gt;</content><summary>In his previous post, Maciej showcased the updates to the jBPM Work Items module and how easy it is now to get up and running with creating new workitems and start using them in your business processes right away. In this post I wanted to leverage on what Maciej showed and add a couple of cool features that the jBPM Work Item repository gives you out of the box, specifically related to the reposit...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2018-04-24T16:46:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2018/04/jbpm-work-items-repository-tips-tricks.html</feedburner:origLink></entry><entry><title>Announcing new product updates of CDK 3.4, DevStudio 11.3, DevSuite 2.3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ZRIcgXZrprQ/" /><category term="Announcement" /><category term="Container Development Kit" /><category term="Java" /><category term="Red Hat Development Suite" /><category term="Red Hat JBoss Developer Studio" /><category term="CDK" /><category term="devstudio" /><category term="Devsuite" /><category term="java 10" /><category term="Kompose" /><author><name>Mike Guerette</name></author><id>https://developers.redhat.com/blog/?p=488277</id><updated>2018-04-24T13:00:01Z</updated><published>2018-04-24T13:00:01Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;We&amp;#8217;re extremely pleased to announce additions and updates to our suite of Red Hat Developers desktop tooling products, including Container Development Kit 3.4, JBoss Developer Studio 11.3, and our DevSuite 2.3 installer. These updates are a continuation of our efforts to increase developer usability, while adding new features that matter most for users of Red Hat platforms and technologies.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;New features in this release&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This release has the following updated tools:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;&lt;span style="font-weight: 400;"&gt;CDK 3.4&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;&lt;span style="font-weight: 400;"&gt;DevStudio 11.3.0&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;a href="https://developers.redhat.com/products/devsuite/overview/"&gt;&lt;span style="font-weight: 400;"&gt;Developer Suite 2.3&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;b&gt;Highlights&lt;/b&gt;&lt;/h2&gt; &lt;p&gt;&lt;span id="more-488277"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;&lt;b&gt;Container Development Kit (CDK)&lt;/b&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;b&gt;New features:&lt;/b&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;OpenShift Container Platform v3.9.14&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Image caching is enabled by-default now for OpenShift container images.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;HyperV users can assign a static IP to CDK&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Users can force hypervisors (except KVM) to reuse the same IP address which was assigned during first CDK start. (Technical preview)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Hostfolder mount using SSHFS (Technical preview)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Other notable changes &amp;#8211; CDK now uses overlay as the default storage driver instead of devicemapper.&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;&lt;b&gt;Red Hat JBoss Developer Studio&lt;/b&gt;&lt;/a&gt; &lt;span style="font-weight: 400;"&gt;11.3 has been updated to support: Eclipse Oxygen.3.a,  the CDK 3.4 Server Adapter, and OpenShift.io login provider. This release supports developing apps in Java 10. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Additionally, &lt;/span&gt;&lt;b&gt;Red Hat DevStudio Central Plugins&lt;/b&gt;&lt;span style="font-weight: 400;"&gt; have been updated to include:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Central p2 Repository 11.3.0&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Subclipse 4.2.3&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;SonarLint for Eclipse 3.3.0&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat AMT Plugin for Eclipse 4.0.0&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;AngularJS for Web Tools 3.8.100&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;JBoss Business Process and Rules Tools 7.5.0&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/devsuite/overview/"&gt;&lt;b&gt;Red Hat Developer Suite 2.3&lt;/b&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; has been updated to include:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat Products updated: (updated versions)&lt;/span&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;CDK  3.4&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;DevStudio 11.3.0&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Fuse Tooling 10.3.0&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Kompose  1.11.0 Technology Preview&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;New Components available for installation (new features)&lt;/span&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Guided Development 1.0.0 Technology Preview&lt;/span&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Fuse, CDK/OpenShift, Java, Eclipse&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;UI Improvements (new features):&lt;/span&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Installer Final Page UI update&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Also see Jeff Maury&amp;#8217;s two related articles:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/24/announcing-developer-studio-11-3-0-ga-jboss-tools-4-5-3-final-eclipse-oxygen-3a/"&gt;Announcing Developer Studio 11.3.0.GA, JBoss Tools 4.5.3 for Eclipse Oxygen.3a&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/24/red-hat-introduces-jdk-10/"&gt;Red Hat introduces JDK 10&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;linkname=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F24%2Fannouncing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3%2F&amp;#38;title=Announcing%20new%20product%20updates%20of%20CDK%203.4%2C%20DevStudio%2011.3%2C%20DevSuite%202.3" data-a2a-url="https://developers.redhat.com/blog/2018/04/24/announcing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3/" data-a2a-title="Announcing new product updates of CDK 3.4, DevStudio 11.3, DevSuite 2.3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/24/announcing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3/"&gt;Announcing new product updates of CDK 3.4, DevStudio 11.3, DevSuite 2.3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ZRIcgXZrprQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;We&amp;#8217;re extremely pleased to announce additions and updates to our suite of Red Hat Developers desktop tooling products, including Container Development Kit 3.4, JBoss Developer Studio 11.3, and our DevSuite 2.3 installer. These updates are a continuation of our efforts to increase developer usability, while adding new features that matter most for users of Red [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/24/announcing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3/"&gt;Announcing new product updates of CDK 3.4, DevStudio 11.3, DevSuite 2.3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">488277</post-id><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-24T13:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/24/announcing-new-product-updates-of-cdk-3-4-devstudio-11-3-devsuite-2-3/</feedburner:origLink></entry></feed>
